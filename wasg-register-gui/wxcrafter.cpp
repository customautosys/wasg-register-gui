//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
	: wxFrame(parent, id, title, pos, size, style)
{
	if ( !bBitmapLoaded ) {
		// We need to initialise the default bitmap handler
		wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
		wxC9ED9InitBitmapResources();
		bBitmapLoaded = true;
	}
	// Set icon(s) to the application/dialog
	wxIconBundle app_icons;
	{
		wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("icon_cas"));
		wxIcon icn;
		icn.CopyFromBitmap(iconBmp);
		app_icons.AddIcon( icn );
	}
	SetIcons( app_icons );


	wxGridBagSizer* mainGridBagSizer = new wxGridBagSizer(0, 0);
	this->SetSizer(mainGridBagSizer);

	optionsNotebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
	optionsNotebook->SetName(wxT("optionsNotebook"));

	mainGridBagSizer->Add(optionsNotebook, wxGBPosition(0,0), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	basicOptions = new wxPanel(optionsNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(optionsNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
	optionsNotebook->AddPage(basicOptions, _("Basic Options"), false);

	wxGridBagSizer* basicOptionsGridBagSizer = new wxGridBagSizer(0, 0);
	basicOptions->SetSizer(basicOptionsGridBagSizer);

	phoneNumberLabel = new wxStaticText(basicOptions, wxID_ANY, _("Phone Number\n(Please prefix with country code without + sign)"), wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), 0);

	basicOptionsGridBagSizer->Add(phoneNumberLabel, wxGBPosition(0,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	phoneNumber = new wxTextCtrl(basicOptions, wxID_ANY, wxT("65"), wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	phoneNumber->SetHint(wxT(""));
#endif

	basicOptionsGridBagSizer->Add(phoneNumber, wxGBPosition(0,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	birthdateLabel = new wxStaticText(basicOptions, wxID_ANY, _("Birthdate"), wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), 0);

	basicOptionsGridBagSizer->Add(birthdateLabel, wxGBPosition(1,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	birthdate = new wxDatePickerCtrl(basicOptions, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), wxDP_DEFAULT);

	basicOptionsGridBagSizer->Add(birthdate, wxGBPosition(1,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	retrieveModeOnly = new wxCheckBox(basicOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), 0);
	retrieveModeOnly->SetValue(false);

	basicOptionsGridBagSizer->Add(retrieveModeOnly, wxGBPosition(2,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	retrieveModeOnlyLabel = new wxStaticText(basicOptions, wxID_ANY, _("Retrieve Mode Only"), wxDefaultPosition, wxDLG_UNIT(basicOptions, wxSize(-1,-1)), 0);

	basicOptionsGridBagSizer->Add(retrieveModeOnlyLabel, wxGBPosition(2,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
	basicOptionsGridBagSizer->AddGrowableCol(0);
	basicOptionsGridBagSizer->AddGrowableCol(1);
	basicOptionsGridBagSizer->AddGrowableRow(0);
	basicOptionsGridBagSizer->AddGrowableRow(1);
	basicOptionsGridBagSizer->AddGrowableRow(2);
	advancedOptions = new wxPanel(optionsNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(optionsNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
	optionsNotebook->AddPage(advancedOptions, _("Advanced Options"), false);

	wxGridBagSizer* advancedOptionsGridBagSizer = new wxGridBagSizer(0, 0);
	advancedOptions->SetSizer(advancedOptionsGridBagSizer);

	ispLabel = new wxStaticText(advancedOptions, wxID_ANY, _("ISP"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(ispLabel, wxGBPosition(0,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	wxArrayString ispArr;
	ispArr.Add(wxT(""));
	ispArr.Add(wxT("Test"));
	ispArr.Add(wxT("MyRepublic"));
	ispArr.Add(wxT("SingTel"));
	isp = new wxChoice(advancedOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), ispArr, 0);

	advancedOptionsGridBagSizer->Add(isp, wxGBPosition(0,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	salutationLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Salutation"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(salutationLabel, wxGBPosition(1,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	salutation = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	salutation->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(salutation, wxGBPosition(1,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	nameLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Name"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(nameLabel, wxGBPosition(2,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	name = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	name->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(name, wxGBPosition(2,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	genderLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Gender"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(genderLabel, wxGBPosition(3,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	gender = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	gender->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(gender, wxGBPosition(3,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	countryLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Country"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(countryLabel, wxGBPosition(4,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	country = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	country->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(country, wxGBPosition(4,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	emailLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Email"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(emailLabel, wxGBPosition(5,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	email = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	email->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(email, wxGBPosition(5,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	transactionIdLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Transaction ID"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(transactionIdLabel, wxGBPosition(6,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	transactionId = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	transactionId->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(transactionId, wxGBPosition(6,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	registrationPhaseOnlyLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Registration Phase Only"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(registrationPhaseOnlyLabel, wxGBPosition(7,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	registrationPhaseOnly = new wxCheckBox(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
	registrationPhaseOnly->SetValue(false);

	advancedOptionsGridBagSizer->Add(registrationPhaseOnly, wxGBPosition(7,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	otpLabel = new wxStaticText(advancedOptions, wxID_ANY, _("OTP"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(otpLabel, wxGBPosition(8,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	otp = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	otp->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(otp, wxGBPosition(8,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	successCodeLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Success Code"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(successCodeLabel, wxGBPosition(9,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	successCode = new wxTextCtrl(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
#if wxVERSION_NUMBER >= 3000
	successCode->SetHint(wxT(""));
#endif

	advancedOptionsGridBagSizer->Add(successCode, wxGBPosition(9,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	decryptionDateLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Decryption Date"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(decryptionDateLabel, wxGBPosition(10,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	decryptionDate = new wxDatePickerCtrl(advancedOptions, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), wxDP_ALLOWNONE|wxDP_DEFAULT);

	advancedOptionsGridBagSizer->Add(decryptionDate, wxGBPosition(10,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	verboseLabel = new wxStaticText(advancedOptions, wxID_ANY, _("Verbose"), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);

	advancedOptionsGridBagSizer->Add(verboseLabel, wxGBPosition(11,0), wxGBSpan(1,1), wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

	verbose = new wxCheckBox(advancedOptions, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(advancedOptions, wxSize(-1,-1)), 0);
	verbose->SetValue(false);

	advancedOptionsGridBagSizer->Add(verbose, wxGBPosition(11,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
	advancedOptionsGridBagSizer->AddGrowableCol(0);
	advancedOptionsGridBagSizer->AddGrowableCol(1);
	advancedOptionsGridBagSizer->AddGrowableRow(0);
	advancedOptionsGridBagSizer->AddGrowableRow(1);
	advancedOptionsGridBagSizer->AddGrowableRow(2);
	advancedOptionsGridBagSizer->AddGrowableRow(3);
	advancedOptionsGridBagSizer->AddGrowableRow(4);
	advancedOptionsGridBagSizer->AddGrowableRow(5);
	advancedOptionsGridBagSizer->AddGrowableRow(6);
	advancedOptionsGridBagSizer->AddGrowableRow(7);
	advancedOptionsGridBagSizer->AddGrowableRow(8);
	advancedOptionsGridBagSizer->AddGrowableRow(9);
	advancedOptionsGridBagSizer->AddGrowableRow(10);
	advancedOptionsGridBagSizer->AddGrowableRow(11);
	about = new wxPanel(optionsNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(optionsNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
	about->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOWFRAME));
	optionsNotebook->AddPage(about, _("About"), false);

	wxGridBagSizer* aboutGridBagSizer = new wxGridBagSizer(0, 0);
	about->SetSizer(aboutGridBagSizer);

	iconCas = new wxStaticBitmap(about, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("icon_cas")), wxDefaultPosition, wxDLG_UNIT(about, wxSize(-1,-1)), 0 );
	iconCas->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOWFRAME));

	aboutGridBagSizer->Add(iconCas, wxGBPosition(0,0), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	textCas = new wxTextCtrl(about, wxID_ANY, wxT("© Custom Automated Systems ® Pte Ltd;200806178R;All Rights Reserved;No warranty for any purpose whatsoever, including usability, merchantability and fitness for any particular purpose, is given. By downloading and continuing to use this software, you hereby warrant that you shall indemnify and hold the proprietors and developers free and harmless from any and all liability and where such exclusion is not permitted by law their liability shall be limited to S$0.01. In any event the user shall be liable for all legal costs on a solicitor-and-client indemnity basis."), wxDefaultPosition, wxDLG_UNIT(about, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE|wxTE_CENTRE);
	textCas->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOWFRAME));

	aboutGridBagSizer->Add(textCas, wxGBPosition(1,0), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
	aboutGridBagSizer->AddGrowableCol(0);
	aboutGridBagSizer->AddGrowableRow(1);
	credentials = new wxPanel(optionsNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(optionsNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
	optionsNotebook->AddPage(credentials, _("Credentials"), false);

	wxGridBagSizer* credentialsGridBagSizer = new wxGridBagSizer(0, 0);
	credentials->SetSizer(credentialsGridBagSizer);

	userIDLabel = new wxStaticText(credentials, wxID_ANY, _("User ID"), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), 0);

	credentialsGridBagSizer->Add(userIDLabel, wxGBPosition(0,0), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));

	userID = new wxTextCtrl(credentials, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE);

	credentialsGridBagSizer->Add(userID, wxGBPosition(0,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	passwordLabel = new wxStaticText(credentials, wxID_ANY, _("Password"), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), 0);

	credentialsGridBagSizer->Add(passwordLabel, wxGBPosition(1,0), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));

	password = new wxTextCtrl(credentials, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE);

	credentialsGridBagSizer->Add(password, wxGBPosition(1,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	outputLabel = new wxStaticText(credentials, wxID_ANY, _("Output"), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), 0);

	credentialsGridBagSizer->Add(outputLabel, wxGBPosition(2,0), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));

	output = new wxTextCtrl(credentials, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE);

	credentialsGridBagSizer->Add(output, wxGBPosition(2,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));

	errorsLabel = new wxStaticText(credentials, wxID_ANY, _("Errors"), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), 0);

	credentialsGridBagSizer->Add(errorsLabel, wxGBPosition(3,0), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));

	errors = new wxTextCtrl(credentials, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(credentials, wxSize(-1,-1)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE);

	credentialsGridBagSizer->Add(errors, wxGBPosition(3,1), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
	credentialsGridBagSizer->AddGrowableCol(0);
	credentialsGridBagSizer->AddGrowableCol(1);
	credentialsGridBagSizer->AddGrowableRow(0);
	credentialsGridBagSizer->AddGrowableRow(1);
	credentialsGridBagSizer->AddGrowableRow(2);
	credentialsGridBagSizer->AddGrowableRow(3);
	registerButton = new wxButton(this, wxID_ANY, _("Register!"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
	registerButton->SetDefault();

	mainGridBagSizer->Add(registerButton, wxGBPosition(1,0), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
	mainGridBagSizer->AddGrowableCol(0);
	mainGridBagSizer->AddGrowableRow(0);
	mainGridBagSizer->AddGrowableRow(1);


#if wxVERSION_NUMBER >= 2900
	if(!wxPersistenceManager::Get().Find(optionsNotebook)) {
		wxPersistenceManager::Get().RegisterAndRestore(optionsNotebook);
	} else {
		wxPersistenceManager::Get().Restore(optionsNotebook);
	}
#endif

	SetName(wxT("MainFrameBaseClass"));
	SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
	if (GetSizer()) {
		GetSizer()->Fit(this);
	}
	if(GetParent()) {
		CentreOnParent(wxBOTH);
	} else {
		CentreOnScreen(wxBOTH);
	}
#if wxVERSION_NUMBER >= 2900
	if(!wxPersistenceManager::Get().Find(this)) {
		wxPersistenceManager::Get().RegisterAndRestore(this);
	} else {
		wxPersistenceManager::Get().Restore(this);
	}
#endif
	// Connect events
	this->Connect(wxEVT_IDLE, wxIdleEventHandler(MainFrameBaseClass::OnIdle), NULL, this);
	this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBaseClass::OnActivate), NULL, this);
	registerButton->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnRegisterButtonClicked), NULL, this);

}

MainFrameBaseClass::~MainFrameBaseClass()
{
	this->Disconnect(wxEVT_IDLE, wxIdleEventHandler(MainFrameBaseClass::OnIdle), NULL, this);
	this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBaseClass::OnActivate), NULL, this);
	registerButton->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnRegisterButtonClicked), NULL, this);

}
